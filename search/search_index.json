{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Converter","text":"<p>A program to convert images to ASCII art.</p>"},{"location":"#converter.ascii_to_image","title":"<code>ascii_to_image(text, font=base_font)</code>","text":"<p>Convert the given text to an image using the given font.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input text to render.</p> required <code>font</code> <code>ImageFont.FreeTypeFont</code> <p>The font to render the text in (default: monos.ttf).</p> <code>base_font</code> <p>Returns:</p> Name Type Description <code>text_image</code> <code>Image.Image</code> <p>The image of the rendered text.</p> <p>Examples:</p> <p>Using the default font:</p> <pre><code>&gt;&gt;&gt; ascii_to_image(\"Hello World\")\n&lt;PIL.Image.Image image mode=RGB size=133x20 at 0x1A9E4D77C40&gt;\n</code></pre> <p>Using a custom font:</p> <pre><code>&gt;&gt;&gt; custom_font = ImageFont.truetype(\"arial.ttf\", 30)\n&gt;&gt;&gt; ascii_to_image(\"Hello World\", custom_font)\n&lt;PIL.Image.Image image mode=RGB size=155x28 at 0x22E826A7C40&gt;\n</code></pre> <p>Saving the image:</p> <pre><code>&gt;&gt;&gt; image = ascii_to_image(\"Hello World\")\n&gt;&gt;&gt; image.save(\"hello_world.png\")\n</code></pre> Source code in <code>converter.py</code> <pre><code>def ascii_to_image(text: str, font: ImageFont.FreeTypeFont = base_font) -&gt; Image.Image:\n\"\"\"\n    Convert the given text to an image using the given font.\n\n    Args:\n        text: The input text to render.\n        font: The font to render the text in (default: monos.ttf).\n\n    Returns:\n        text_image: The image of the rendered text.\n\n    Examples:\n        Using the default font:\n        &gt;&gt;&gt; ascii_to_image(\"Hello World\")\n        &lt;PIL.Image.Image image mode=RGB size=133x20 at 0x1A9E4D77C40&gt;\n\n        Using a custom font:\n        &gt;&gt;&gt; custom_font = ImageFont.truetype(\"arial.ttf\", 30)\n        &gt;&gt;&gt; ascii_to_image(\"Hello World\", custom_font)\n        &lt;PIL.Image.Image image mode=RGB size=155x28 at 0x22E826A7C40&gt;\n\n        Saving the image:\n        &gt;&gt;&gt; image = ascii_to_image(\"Hello World\")\n        &gt;&gt;&gt; image.save(\"hello_world.png\")\n    \"\"\"\n    text_image = Image.new(\"RGB\", sizeof(text, font))\n    draw = ImageDraw.Draw(text_image)\n    draw.text((0, 0), text, (255, 255, 255), font)\n    return text_image\n</code></pre>"},{"location":"#converter.get_brightness_of_char","title":"<code>get_brightness_of_char(char, font=base_font)</code>","text":"<p>Get the brightness of the given character when rendered in the given font.</p> <p>Parameters:</p> Name Type Description Default <code>char</code> <code>str</code> <p>The character to find its brightness.</p> required <code>font</code> <code>ImageFont.FreeTypeFont</code> <p>The font to use to render the character (default: monos.ttf).</p> <code>base_font</code> <p>Returns:</p> Name Type Description <code>brightness</code> <code>int</code> <p>The brightness of the character, the number of pixels that are not black.</p> <p>Examples:</p> <p>Using the default font:</p> <pre><code>&gt;&gt;&gt; get_brightness_of_char(\"A\")\n267\n</code></pre> <p>Using a custom font:</p> <pre><code>&gt;&gt;&gt; custom_font = ImageFont.truetype(\"arial.ttf\", 30)\n&gt;&gt;&gt; get_brightness_of_char(\"A\", custom_font)\n576\n</code></pre> <p>Comparing brightness of characters:</p> <pre><code>&gt;&gt;&gt; get_brightness_of_char(\"@\") &gt; get_brightness_of_char(\".\")\nTrue\n</code></pre> Source code in <code>converter.py</code> <pre><code>def get_brightness_of_char(char: str, font: ImageFont.FreeTypeFont = base_font) -&gt; int:\n\"\"\"\n    Get the brightness of the given character when rendered in the given font.\n\n    Args:\n        char: The character to find its brightness.\n        font: The font to use to render the character (default: monos.ttf).\n\n    Returns:\n        brightness: The brightness of the character, the number of pixels that are not black.\n\n    Examples:\n        Using the default font:\n        &gt;&gt;&gt; get_brightness_of_char(\"A\")\n        267\n\n        Using a custom font:\n        &gt;&gt;&gt; custom_font = ImageFont.truetype(\"arial.ttf\", 30)\n        &gt;&gt;&gt; get_brightness_of_char(\"A\", custom_font)\n        576\n\n        Comparing brightness of characters:\n        &gt;&gt;&gt; get_brightness_of_char(\"@\") &gt; get_brightness_of_char(\".\")\n        True\n    \"\"\"\n    image = ascii_to_image(char, font)\n    return (np.array(image) != 0).sum()\n</code></pre>"},{"location":"#converter.image_to_ascii","title":"<code>image_to_ascii(image, size=None, charset=None, fix_scaling=True, scale=1, sharpness=1, brightness=1, sort_chars=False, colorfull=False)</code>","text":"<p>Convert image to ASCII art.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Image.Image | str</code> <p>The image to convert to ASCII art, can be given as path or URL or an Image object. If given the string \"clip\" or \"clipboard\", it will use the image from the clipboard.</p> required <code>size</code> <code>Optional[tuple[int, int]]</code> <p>The final size of the ascii art, if scale is given the scale will be applied upon this size.</p> <code>None</code> <code>charset</code> <code>Optional[Sequence[str]]</code> <p>Characters to use for conversion ordered in lightest to darkest, if not given will use default characters.</p> <code>None</code> <code>fix_scaling</code> <code>bool</code> <p>Whether to fix scaling of the image to preserve aspect ratio.</p> <code>True</code> <code>scale</code> <code>float | tuple[float, float]</code> <p>Scaling factor of the output image, if tuple is given it will be (width_scale, height_scale).</p> <code>1</code> <code>sharpness</code> <code>float</code> <p>Increases the sharpness of the image by the given factor</p> <code>1</code> <code>brightness</code> <code>float</code> <p>Increases the brightness of the image by the given factor</p> <code>1</code> <code>sort_chars</code> <code>bool</code> <p>If given an unordered charset, it will sort it by the brightness of the characters.</p> <code>False</code> <code>colorfull</code> <code>bool</code> <p>Whether to use colored characters (only works on terminal).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>output</code> <code>str</code> <p>The ASCII art representation of the input image.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If image is invalid or cannot be loaded from path or URL.</p> <p>Examples:</p> <p>Using a custom size and charset:</p> <pre><code>&gt;&gt;&gt; print(image_to_ascii(\"github.png\", size=(20, 20), charset=\"\u2591\u2592\u2593\u2588\"))\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2593\u2591\u2592\u2592\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2591\u2593\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2593\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n</code></pre> <p>Tweaking brightness and sharpness:</p> <pre><code>&gt;&gt;&gt; print(image_to_ascii(\"github.png\", size=(20, 20), charset=\"\u2591\u2592\u2593\u2588\", brightness=0.5, sharpness=0.5))\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n</code></pre> Source code in <code>converter.py</code> <pre><code>def image_to_ascii(\n    image: Image.Image | str,\n    size: Optional[tuple[int, int]] = None,\n    charset: Optional[Sequence[str]] = None,\n    fix_scaling: bool = True,\n    scale: float | tuple[float, float] = 1,\n    sharpness: float = 1,\n    brightness: float = 1,\n    sort_chars: bool = False,\n    colorfull: bool = False,\n) -&gt; str:\n\"\"\"\n    Convert image to ASCII art.\n\n    Args:\n        image: The image to convert to ASCII art, can be given as path or URL or an Image object.\n            If given the string \"clip\" or \"clipboard\", it will use the image from the clipboard.\n        size: The final size of the ascii art, if scale is given the scale will be applied upon this size.\n        charset: Characters to use for conversion ordered in lightest to darkest, if not given will use default characters.\n        fix_scaling: Whether to fix scaling of the image to preserve aspect ratio.\n        scale: Scaling factor of the output image, if tuple is given it will be (width_scale, height_scale).\n        sharpness: Increases the sharpness of the image by the given factor\n        brightness: Increases the brightness of the image by the given factor\n        sort_chars: If given an unordered charset, it will sort it by the brightness of the characters.\n        colorfull: Whether to use colored characters (only works on terminal).\n\n    Returns:\n        output: The ASCII art representation of the input image.\n\n    Raises:\n        ValueError: If image is invalid or cannot be loaded from path or URL.\n\n    Examples:\n        Using a custom size and charset:\n        &gt;&gt;&gt; print(image_to_ascii(\"github.png\", size=(20, 20), charset=\"\u2591\u2592\u2593\u2588\"))\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2593\u2591\u2592\u2592\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2592\u2592\u2591\u2593\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2588\u2588\u2593\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2593\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\n        Tweaking brightness and sharpness:\n        &gt;&gt;&gt; print(image_to_ascii(\"github.png\", size=(20, 20), charset=\"\u2591\u2592\u2593\u2588\", brightness=0.5, sharpness=0.5))\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2591\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n        \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n    \"\"\"\n    if isinstance(image, str):\n        if image.lower() in (\"clip\", \"clipboard\"):\n            image = ImageGrab.grabclipboard()\n            if not isinstance(image, Image.Image):\n                raise ValueError(\"Unable to load image from clipboard\")\n        else:\n            try:\n                image = Image.open(image)\n            except OSError:\n                try:\n                    image = Image.open(get(image, stream=True).raw)\n                except Exception:\n                    raise ValueError(\"Unable to load image from URL\")\n            except Exception:\n                raise ValueError(\"Unable to load image from path\")\n    if not isinstance(image, Image.Image):\n        raise ValueError(\"Invalid image path or URL\")\n\n    image = image.convert(\"RGB\")\n\n    if sort_chars and charset:\n        charset = sorted(charset, key=get_brightness_of_char)\n    charset = charset or sorted_letters\n\n    image_width, image_height = size or image.size\n\n    if isinstance(scale, int | float):\n        scale = (scale,) * 2\n    image_width = int(image_width * scale[0] * (bool(fix_scaling) + 1))\n    image_height = int(image_height * scale[1])\n\n    scaled_image = image.resize((image_width, image_height))\n    brightened_image = ImageEnhance.Brightness(scaled_image).enhance(brightness)\n    sharpened_image = ImageEnhance.Sharpness(brightened_image).enhance(sharpness)\n    image_array = np.array(sharpened_image.convert(\"L\"), dtype=int) * len(charset) // 256\n    ascii_converted = np.vectorize(charset.__getitem__)(image_array)\n\n    output = \"\\n\".join(map(\"\".join, ascii_converted))\n    if colorfull:\n        colors = []\n        for row in np.array(sharpened_image.convert(\"RGB\")):\n            for pixel in row:\n                colors.append(bg(*pixel))\n            colors.append(rs.bg)\n        output = \"\".join(color + char for color, char in zip(colors, output))\n    return output\n</code></pre>"},{"location":"#converter.sizeof","title":"<code>sizeof(text, font=base_font)</code>","text":"<p>Get the size of the text when rendered in the given font in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input text to render.</p> required <code>font</code> <code>ImageFont.FreeTypeFont</code> <p>The font to use for the text size calculation (default: monos.ttf).</p> <code>base_font</code> <p>Returns:</p> Name Type Description <code>size</code> <code>tuple[int, int]</code> <p>The size of the text in pixels, (width, height).</p> <p>Examples:</p> <p>Using the default font:</p> <pre><code>&gt;&gt;&gt; sizeof(\"Hello World\")\n(133, 20)\n</code></pre> <p>Using a custom font:</p> <pre><code>&gt;&gt;&gt; custom_font = ImageFont.truetype(\"arial.ttf\", 30)\n&gt;&gt;&gt; sizeof(\"Hello World\", custom_font)\n(155, 28)\n</code></pre> Source code in <code>converter.py</code> <pre><code>def sizeof(text: str, font: ImageFont.FreeTypeFont = base_font) -&gt; tuple[int, int]:\n\"\"\"\n    Get the size of the text when rendered in the given font in pixels.\n\n    Args:\n        text: The input text to render.\n        font: The font to use for the text size calculation (default: monos.ttf).\n\n    Returns:\n        size: The size of the text in pixels, (width, height).\n\n    Examples:\n        Using the default font:\n        &gt;&gt;&gt; sizeof(\"Hello World\")\n        (133, 20)\n\n        Using a custom font:\n        &gt;&gt;&gt; custom_font = ImageFont.truetype(\"arial.ttf\", 30)\n        &gt;&gt;&gt; sizeof(\"Hello World\", custom_font)\n        (155, 28)\n    \"\"\"\n    draw = ImageDraw.Draw(Image.new(\"RGB\", (1, 1)))\n    _, _, width, height = draw.textbbox((0, 0), text, font)\n    return width, height\n</code></pre>"}]}